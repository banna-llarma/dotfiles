{
  "importFunc": {
    "prefix": "importFunc",
    "body": [
      "import { $1 } from '$0'"
    ]
  },
  "import": {
    "prefix": "import",
    "body": [
      "import $1 from '$0'"
    ]
  },
  "require": {
    "prefix": "require",
    "body": [
      "require('$0')"
    ]
  },
  ".then": {
    "prefix": ".then",
    "body": [
      ".then(($1) => $0)"
    ]
  },
  ".put": {
    "prefix": ".put",
    "body": [
      ".put(($1) => $0)"
    ]
  },



  "Array.from": {
    "prefix": "Array.from",
    "body": [
      "Array.from($0)"
    ]
  },
  "fetch": {
    "prefix": "fetch",
    "body": [
      "fetch($0)"
    ]
  },

  "addEventListener": {
    "prefix": "addEventListener",
    "body": [
      "addEventListener('$1', () => $0)"
    ]
  },
  "JSON.parse": {
    "prefix": "JSON.parse",
    "body": [
      "JSON.parse($0)"
    ]
  },

  "func": {
    "prefix": "func",
    "body": [
      "const $1 = ($2) => {",
      "  $0",
      "}"
    ]
  },
  "toUpperCase": {
    "prefix": "toUpperCase",
    "body": [
      "toUpperCase()"
    ]
  },
  "tolowerCase": {
    "prefix": "tolowerCase",
    "body": [
      "toLowerCase()"
    ]
  },
  "JSON.stringify": {
    "prefix": "JSON.stringify",
    "body": [
      "JSON.stringify($1${0:, null, 2})"
    ]
  },
  "cl": {
    "prefix": "cl",
    "body": [
      "console.log($0)"
    ]
  },
  "ce": {
    "prefix": "ce",
    "body": [
      "console.error($0)"
    ]
  },
  "const": {
    "prefix": "const",
    "body": [
      "const $1 = $0"
    ]
  },
  "if": {
    "prefix": "if",
    "body": [
      "if ($1) {$0}"
    ]
  },
  "else": {
    "prefix": "else",
    "body": [
      "else {$0}"
    ]
  },
  "For Loop": {
    "prefix": "for",
    "body": [
      "for (let i = 0; $1; i++)"
    ]
  },
  "forOf": {
    "prefix": "forOf",
    "body": [
      "for (i of $1) {",
      "\t$0",
      "}"
    ]
  },
  "forIn": {
    "prefix": "forIn",
    "body": [
      "for (i in $1) {",
      "\t$0",
      "}"
    ]
  },
  "map": {
    "prefix": "map",
    "body": [
      "map(($1) => $0)"
    ]
  },
  "module.exports": {
    "prefix": "moduleExports",
    "body": [
      "module.exports = "
    ]
  },
  "re": {
    "prefix": "re",
    "body": [
      "const $1 = require('$1')"
    ]
  },
  "document.getElementById": {
    "prefix": "document.getElementById",
    "body": [
      "document.getElementById('$0')"
    ]
  },
  "reduce": {
    "prefix": "reduce",
    "body": [
      "reduce((acc, cur${1:, ind}${2:, arr}) => $0)"
    ]
  },
  "document.getElementByClassName": {
    "prefix": "document.getElementByClassName",
    "body": [
      "document.getElementByClassName('$0')"
    ]
  },
  "document.getElementsById": {
    "prefix": "document.getElementsById",
    "body": [
      "document.getElementsByID('$0)"
    ]
  },
  "getElementsByClassName": {
    "prefix": "getElementsByClassName",
    "body": [
      "getElementsByClassName($0)"
    ]
  },
  "document.querySelector": {
    "prefix": "document.querySelector",
    "body": [
      "document.querySelector('$0')"
    ]
  },
  "document.querySelectorAll": {
    "prefix": "document.querySelectorAll",
    "body": [
      "document.querySelectorAll('$0')"
    ]
  },
  "let": {
    "prefix": "let",
    "body": [
      "let $1 = $0"
    ]
  },
  "forEach": {
    "prefix": "forEach",
    "body": [
      "forEach(($1) => $0)"
    ]
  },
  "if err": {
    "prefix": "if err",
    "body": [
      "if (err) { throw err }"
    ]
  },
  "$": {
    "prefix": "$",
    "body": [
      "\\${$0}"
    ]
  },




  "reHttp": {
    "prefix": "reHttp",
    "body": [
      "const http = require('http')"
    ]
  },

  "reMongoClient": {
    "prefix": "reMongoClient",
    "body": [
      "const MongoClient = require('mongodb').MongoClient"
    ]
  },

  "reFs": {
    "prefix": "reFs",
    "body": [
      "const fs = require('fs')"
    ]
  },
  "reExpress": {
    "prefix": "reExpress",
    "body": [
      "const express = require('express')",
      "const app = express()"
    ]
  },
  "rePath": {
    "prefix": "rePath",
    "body": [
      "const path = require('path')"
    ]
  },
  "reOs": {
    "prefix": "reOs",
    "body": [
      "const os = require('os')"
    ]
  },
  "reMongoose": {
    "prefix": "reMongoose",
    "body": [
      "const mongoose = require('mongoose')"
    ]
  },
  "reUrl": {
    "prefix": "reUrl",
    "body": [
      "const url = require('url')"
    ]
  },
  "reRouter": {
    "prefix": "reRouter",
    "body": [
      "const router = express.Router"
    ]
  },
  "reCp": {
    "prefix": "reCp",
    "body": [
      "const cp = require('child_process')"
    ]
  },


  "imUrl": {
    "prefix": "imUrl",
    "body": [
      "import url from 'url'"
    ]
  },
  "imExpress": {
    "prefix": "imExpress",
    "body": [
      "import express from 'express'",
      "const app = express()"
    ]
  },
  "imHttp": {
    "prefix": "imHttp",
    "body": [
      "import http from 'http'"
    ]
  },
  "imMongoose": {
    "prefix": "imMongoose",
    "body": [
      "import mongoose from 'mongoose'"
    ]
  },


  "path.basename": {
    "prefix": "path.basename",
    "body": [
      "path.basename($0)"
    ]
  },
  "path.dirname": {
    "prefix": "path.dirname",
    "body": [
      "path.dirname($0)"
    ]
  },
  "path.extname": {
    "prefix": "path.extname",
    "body": [
      "path.extname($0)"
    ]
  },
  "path.parse": {
    "prefix": "path.parse",
    "body": [
      "path.parse($0)"
    ]
  },
  "path.join": {
    "prefix": "path.join",
    "body": [
      "path.join($0)"
    ]
  },

  "app.get": {
    "prefix": "app.get",
    "body": [
      "app.get('$1', (req, res) => $0)"
    ]
  },
  ".get": {
    "prefix": ".get",
    "body": [
      ".get('$1', (req, res) => $0)"
    ]
  },

  "app.use": {
    "prefix": "app.use",
    "body": [
      "app.use($0)"
    ]
  },
  "app.listen": {
    "prefix": "app.listen",
    "body": [
      "app.listen((${1:port}), () => console.log('server running...'))"
    ]
  },
  "app.post": {
    "prefix": "app.post",
    "body": [
      "app.post('${1:port}', (req, res) => $0)"
    ]
  },
  ".post": {
    "prefix": ".post",
    "body": [
      ".post('$1', (req, res) => $0)"
    ]
  },

  "router": {
    "prefix": "router",
    "body": [
      "let router = express.Router()"
    ]
  },
  ".route": {
    "prefix": ".route",
    "body": [
      ".route('$0')"
    ]
  },




  "fs.writeFile": {
    "prefix": "fs.writeFile",
    "body": [
      "fs.writeFile(${1:file}, ${2:data}, (err) => $0)"
    ]
  },
  "fs.open": {
    "prefix": "fs.open",
    "body": [
      "fs.open(${1:path}, ${2:flag}, (err, fd) => $0)"
    ]
  },
  "fs.readFile": {
    "prefix": "fs.readFile",
    "body": [
      "fs.readFile(${1:path}, 'utf8', (err, data) => $0)"
    ]
  },
  "fs.readFileSync": {
    "prefix": "fs.readFileSync",
    "body": [
      "fs.readFileSync(${0:path}, 'utf8')"
    ]
  },
  "fs.readdir": {
    "prefix": "fs.readdir",
    "body": [
      "fs.readdir(${1:path}, (err, files) => $0)"
    ]
  },
  "fs.mkdir": {
    "prefix": "fs.mkdir",
    "body": [
      "fs.mkdir(${1:path}, {}, (err) => $0"
    ]
  },
  "fs.appendFile": {
    "prefix": "fs.appendFile",
    "body": [
      "fs.appendFile(${1:file}, ${0:data})"
    ]
  },
  "fs.readdirSync": {
    "prefix": "fs.readdirSync",
    "body": [
      "fs.readdirSync(${0:path}, 'utf8')"
    ]
  },
  "fs.rename": {
    "prefix": "fs.rename",
    "body": [
      "fs.rename(${1:path}, ${2:newPath}, (err) => $0)"
    ]
  },

  "os.platform": {
    "prefix": "os.platform",
    "body": [
      "os.platform()"
    ]
  },
  "os.arch": {
    "prefix": "os.arch",
    "body": [
      "os.arch()"
    ]
  },
"os.cpus": {
  "prefix": "os.cpus",
  "body": [
    "os.cpus()"
  ]
},
  "os.freemem": {
    "prefix": "os.freemem",
    "body": [
      "os.freemem()"
    ]
  },
  "os.totalmem": {
    "prefix": "os.totalmem",
    "body": [
      "os.totalmem()"
    ]
  },
  "os.homedir": {
    "prefix": "os.homedir",
    "body": [
      "os.homedir()"
    ]
  },
  "os.uptime": {
    "prefix": "os.uptime",
    "body": [
      "os.uptime()"
    ]
  },

  "newUrl": {
    "prefix": "newUrl",
    "body": [
      "new URL('http://$0')"
    ]
  },

  "reEvents": {
    "prefix": "reEvents",
    "body": [
      "const EventEmitter = require('events')"
    ]
  },
  "myEmitter": {
    "prefix": "MyEmitter",
    "body": [
      "class MyEmitter extends EventEmitter {}",
      "const myEmitter = new MyEmitter()"
    ]
  },


  "http.createServer": {
    "prefix": "http.createServer",
    "body": [
      "http.createServer((req, res) => $0)"
    ]
  },
  "res.write": {
    "prefix": "res.write",
    "body": [
      "res.write($0)"
    ]
  },
  "res.writeHead": {
    "prefix": "res.writeHead",
    "body": [
      "res.writeHead(${1:200}, {'Content-Type': '$0'})"
    ]
  },

  "res.sendFile": {
    "prefix": "res.sendFile",
    "body": [
      "res.sendFile($0)"
    ]
  },
  "res.json": {
    "prefix": "res.json",
    "body": [
      "res.json($0)"
    ]
  },

  "res.end": {
    "prefix": "res.end",
    "body": [
      "res.end($0)"
    ]
  },
  "res.send": {
    "prefix": "res.send",
    "body": [
      "res.send($0)"
    ]
  },

  "req.get": {
    "prefix": "req.get",
    "body": [
      "req.get($0)"
    ]
  },
  "req.protocol": {
    "prefix": "req.protocol",
    "body": [
      "req.protocol"
    ]
  },
  "req.originalUrl": {
    "prefix": "req.originalUrl",
    "body": [
      "req.originalUrl"
    ]
  },
  "req.params": {
    "prefix": "req.params",
    "body": [
      "req.params"
    ]
  },


  "cp.exec": {
    "prefix": "cp.exec",
    "body": [
      "cp.exec(${1:command}, (err, stdout, stderr) => $0)"
    ]
  },


  "classList.remove": {
    "prefix": "classList.remove",
    "body": [
      "classList.remove($0)"
    ]
  },
"classList.add": {
  "prefix": "classList.add",
  "body": [
    "classList.add($0)"
  ]
},
"classList.contains": {
  "prefix": "classList.contains",
  "body": [
    "classList.contains($0)"
  ]
},

"xhr.open": {
  "prefix": "xhr.open",
  "body": [
    "xhr.open(${1:responseType}, ${0:url})"
  ]
},
"xhr.responseText": {
  "prefix": "xhr.responseText",
  "body": [
    "xhr.responseText"
  ]
},
"newXHR": {
  "prefix": "newXHR",
  "body": [
    "const xhr = new XMLHttpRequest()"
  ]
},
"xhr.send": {
  "prefix": "xhr.send",
  "body": [
    "xhr.send()"
  ]
},
"xhr.onload": {
  "prefix": "xhr.onload",
  "body": [
    "xhr.onload = () => $0"
  ]
},

"mosgoose.connect": {
  "prefix": "mosgoose.connect",
  "body": [
    "mongoose.connect(${1:url}, {$0})"
  ]
},

  ".listen": {
    "prefix": ".listen",
    "body": [
      ".listen(${1:Port}, () => console.log('server running...'))"
    ]
  },
  "port": {
    "prefix": "port",
    "body": [
      "const port = process.env.PORT | 3001"
    ]
  },
  "middlewareFunc": {
    "prefix": "middlewareFunc",
    "body": [
      "const $1 = (req, res, next) => $0"
    ]
  }
}
